# PIETA 프로젝트 URL 구성 및 데이터베이스 구조

## 1. URL 구성

### 메인 페이지
- **URL**: `/`
- **파일 위치**: `src/app/page.tsx`
- **기능**: 투자 상품과 주얼리 카테고리를 선택할 수 있는 랜딩 페이지
- **사용 데이터베이스**: 없음

### 인증 관련 페이지
- **로그인 페이지**
  - **URL**: `/login`
  - **파일 위치**: `src/app/login/page.tsx`
  - **기능**: 사용자 로그인
  - **사용 데이터베이스**: Supabase Auth API

- **회원가입 페이지**
  - **URL**: `/signup`
  - **파일 위치**: `src/app/signup/page.tsx`
  - **기능**: 회원가입 유형 선택 페이지
  - **사용 데이터베이스**: 없음

- **일반 회원가입 페이지**
  - **URL**: `/signup/regular`
  - **파일 위치**: `src/app/signup/regular/page.tsx`
  - **기능**: 일반 사용자 회원가입
  - **사용 데이터베이스**: `users`, `regular_users`

- **판매자 회원가입 페이지**
  - **URL**: `/signup/vendor`
  - **파일 위치**: `src/app/signup/vendor/page.tsx`
  - **기능**: 판매자 회원가입
  - **사용 데이터베이스**: `users`, `vendor_users`

### 사용자 프로필 페이지
- **URL**: `/profile`
- **파일 위치**: `src/app/profile/page.tsx`
- **기능**: 사용자 정보 확인 및 관리
- **사용 데이터베이스**: 
  - `users`: 공통 사용자 정보
  - `regular_users`: 일반 사용자 추가 정보
  - `vendor_users`: 판매자 추가 정보

### 카테고리 페이지
- **주얼리 페이지**
  - **URL**: `/jewelry`
  - **파일 위치**: `src/app/jewelry/page.tsx`
  - **기능**: 주얼리 제품 목록 표시
  - **사용 데이터베이스**: 
    - `products`: 제품 정보 (카테고리가 'jewelry'인 제품)
    - `stores`: 상점 정보

- **투자 상품 페이지**
  - **URL**: `/investment`
  - **파일 위치**: `src/app/investment/page.tsx`
  - **기능**: 투자 상품 목록 표시
  - **사용 데이터베이스**: 
    - `products`: 제품 정보 (카테고리가 'investment'인 제품)
    - `stores`: 상점 정보

### 상점 관련 페이지
- **상점 목록 페이지**
  - **URL**: `/storelist`
  - **파일 위치**: `src/app/storelist/page.tsx`
  - **기능**: 전체 상점 목록 표시
  - **사용 데이터베이스**: `stores`

- **상점 상세 페이지**
  - **URL**: `/store/[id]` (동적 라우팅)
  - **파일 위치**: `src/app/store/[id]/page.tsx`
  - **기능**: 특정 상점의 상세 정보 및 제품 목록 표시
  - **사용 데이터베이스**: 
    - `stores`: 상점 정보
    - `products`: 상점에 등록된 제품 목록

### 제품 관련 페이지
- **제품 목록 페이지**
  - **URL**: `/itemlist`
  - **파일 위치**: `src/app/itemlist/page.tsx`
  - **기능**: 전체 제품 목록 표시
  - **사용 데이터베이스**: 
    - `products`: 전체 제품 목록
    - `stores`: 상점 정보

- **제품 상세 페이지**
  - **URL**: `/store/[id]/product/[productId]` (동적 라우팅)
  - **파일 위치**: `src/app/store/[id]/product/[productId]/page.tsx`
  - **기능**: 특정 제품의 상세 정보 표시
  - **사용 데이터베이스**: 
    - `products`: 제품 정보
    - `stores`: 상점 정보
    - `product_images`: 제품 이미지
    - `product_reviews`: 제품 리뷰
    - `product_favorites`: 제품 찜하기 정보

- **제품 생성 페이지**
  - **URL**: `/store/[id]/product/new`
  - **파일 위치**: `src/app/store/[id]/product/new/page.tsx`
  - **기능**: 새 제품 등록
  - **사용 데이터베이스**: 
    - `products`: 제품 정보 등록
    - `product_images`: 제품 이미지 등록

- **제품 수정 페이지**
  - **URL**: `/store/[id]/product/edit/[productId]`
  - **파일 위치**: `src/app/store/[id]/product/edit/[productId]/page.tsx`
  - **기능**: 기존 제품 정보 수정
  - **사용 데이터베이스**: 
    - `products`: 제품 정보 수정
    - `product_images`: 제품 이미지 수정

## 2. 데이터베이스 테이블 구조

### 사용자 관련 테이블

#### `users` 테이블
- **설명**: 모든 사용자의 공통 정보 저장
- **주요 필드**:
  - `id`: UUID, 기본 키
  - `email`: 이메일 (필수)
  - `phone`: 전화번호 (옵션)
  - `user_type`: 사용자 유형 ('regular' 또는 'vendor')
  - `is_active`: 활성 상태
  - `created_at`: 생성 시간
  - `updated_at`: 업데이트 시간

#### `regular_users` 테이블
- **설명**: 일반 사용자의 추가 정보 저장
- **주요 필드**:
  - `user_id`: UUID, 기본 키, users 테이블 참조
  - `name`: 이름 (필수)
  - `birth_date`: 생년월일 (옵션)
  - `gender`: 성별 (옵션)
  - `address`: 주소 (옵션)
  - `preferences`: 선호도 (JSONB)
  - `created_at`: 생성 시간
  - `updated_at`: 업데이트 시간

#### `vendor_users` 테이블
- **설명**: 판매자의 추가 정보 저장
- **주요 필드**:
  - `user_id`: UUID, 기본 키, users 테이블 참조
  - `business_name`: 사업자명 (필수)
  - `business_number`: 사업자 번호 (필수)
  - `representative_name`: 대표자명 (필수)
  - `business_category`: 업종 (옵션)
  - `address`: 주소 (필수)
  - `status`: 승인 상태 ('pending', 'approved', 'rejected')
  - `approval_date`: 승인 날짜
  - `rejection_reason`: 거부 이유
  - `created_at`: 생성 시간
  - `updated_at`: 업데이트 시간

### 상점 관련 테이블

#### `stores` 테이블
- **설명**: 상점 정보 저장
- **주요 필드**:
  - `id`: UUID, 기본 키
  - `vendor_id`: UUID, vendor_users 테이블 참조
  - `store_name`: 상점명 (필수)
  - `store_description`: 상점 설명
  - `store_logo_url`: 로고 이미지 URL
  - `store_banner_url`: 배너 이미지 URL
  - `store_phone`: 상점 전화번호
  - `store_email`: 상점 이메일
  - `store_address`: 상점 주소 (필수)
  - `business_hours`: 영업시간 (JSONB)
  - `is_open`: 오픈 상태
  - `created_at`: 생성 시간
  - `updated_at`: 업데이트 시간

### 제품 관련 테이블

#### `products` 테이블
- **설명**: 제품 정보 저장
- **주요 필드**:
  - `id`: UUID, 기본 키
  - `store_id`: UUID, stores 테이블 참조
  - `product_name`: 제품명 (필수)
  - `product_description`: 제품 설명
  - `product_image_url`: 대표 이미지 URL
  - `price`: 가격 (필수)
  - `stock`: 재고 (필수)
  - `is_available`: 판매 가능 상태
  - `created_at`: 생성 시간
  - `updated_at`: 업데이트 시간
  - `total_sales`: 총 판매량
  - `average_rating`: 평균 평점
  - `category`: 카테고리
  - `subcategory`: 서브 카테고리

#### `product_images` 테이블
- **설명**: 제품 이미지 저장
- **주요 필드**:
  - `id`: UUID, 기본 키
  - `product_id`: UUID, products 테이블 참조
  - `image_url`: 이미지 URL (필수)
  - `is_primary`: 대표 이미지 여부
  - `display_order`: 표시 순서
  - `created_at`: 생성 시간
  - `updated_at`: 업데이트 시간

#### `product_reviews` 테이블
- **설명**: 제품 리뷰 저장
- **주요 필드**:
  - `id`: UUID, 기본 키
  - `product_id`: UUID, products 테이블 참조
  - `user_id`: UUID, users 테이블 참조
  - `rating`: 평점 (필수)
  - `review_text`: 리뷰 내용
  - `review_image_url`: 리뷰 이미지 URL
  - `is_verified_purchase`: 구매 확인 여부
  - `created_at`: 생성 시간

#### `product_favorites` 테이블
- **설명**: 사용자가 찜한 제품 정보 저장
- **주요 필드**:
  - `id`: UUID, 기본 키
  - `product_id`: UUID, products 테이블 참조
  - `user_id`: UUID, users 테이블 참조
  - `created_at`: 생성 시간

#### `product_sales` 테이블
- **설명**: 제품 판매 정보 저장
- **주요 필드**:
  - `id`: UUID, 기본 키
  - `product_id`: UUID, products 테이블 참조
  - `user_id`: UUID, 구매자 ID
  - `quantity`: 구매 수량
  - `total_price`: 총 가격
  - `status`: 주문 상태
  - `created_at`: 생성 시간
  - `updated_at`: 업데이트 시간

### 기타 테이블

#### `advertisements` 테이블
- **설명**: 광고 정보 저장
- **주요 필드**:
  - 광고 관련 정보들

## 3. 데이터 흐름 예시

### 제품 상세 페이지 (/store/[id]/product/[productId]) 데이터 흐름
1. `params`에서 `storeId`와 `productId` 추출
2. `supabase`를 통해 `stores` 테이블에서 해당 상점 정보 조회
3. `products` 테이블에서 해당 제품 정보 조회
4. `product_images` 테이블에서 제품 이미지 조회
5. 로그인한 사용자인 경우 `product_favorites` 테이블에서 찜 여부 확인
6. `product_reviews` 테이블에서 제품 리뷰 조회
7. 리뷰 작성자 정보를 `regular_users` 테이블에서 조회

### 상점 상세 페이지 (/store/[id]) 데이터 흐름
1. `params`에서 `storeId` 추출
2. `supabase`를 통해 `stores` 테이블에서 해당 상점 정보 조회
3. `products` 테이블에서 해당 상점의 제품 목록 조회
4. 사용자가 상점 소유자인지 `user.id와 store.vendor_id` 비교하여 확인 